@page "/testsManagement"
@using System.Net
@using Blazored.Toast.Services
@using MasiYellow.Infrastructure
@using MasiYellow.Models
@using MasiYellow.Util
@using Microsoft.AspNetCore.Components

@inject IToastService ToastService
@inject IUriHelper UriHelper
@inject ApiCommunicator ApiCommunicator
@inject AuthorizationManager AuthorizationManager
@inject IJSRuntime JsRuntime

<h1>Manage Tests</h1>

@if (_tests == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Test Name</th>
            <th>Edit</th>
            <th>Export</th>
            <th>Delete</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var test in _tests)
        {
            <tr>
                <td>@test.TestName</td>
                <td>
                    <Button onclick="@(() => OnTestEdit(test))">Edit</Button>
                </td>                
                <td>
                    <Button onclick="@(() => ExportAsCsv(test))">Csv</Button>
                </td>             
                <td>
                    <Button onclick="@(() => ExportAsPdf(test))">PDF</Button>
                </td>
                <td>
                    <Button onclick="@(() => OnTestRemove(test))">Delete</Button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (AuthorizationManager.CurrentUserRole == UserRole.Redactor)
{
    <Button onclick="@(() => UriHelper.Navigate("createTest"))">Create New Test</Button>
                                                                           <p>Import file:</p>
    <input type="file" onchange="@UploadFile" id="fileUpload"/>
}

@functions {

    private List<Test> _tests;

    protected override async Task OnInitAsync()
    {
        _tests = await ApiCommunicator.GetAllTests();
    }

    public void OnTestEdit(Test test)
    {
        UriHelper.Navigate($"/editTest/{test.TestId}");
    }

    public async void OnTestRemove(Test test)
    {
        if (await ApiCommunicator.DeleteTest(test))
        {
            _tests.Remove(test);
        }
    }

    public async Task<string> GetFileData(string fileInputRef)
    {
        return (await JsRuntime.InvokeAsync<StringHolder>("getFileData", fileInputRef)).Content;
    }

    async Task UploadFile()
    {
        var data = await GetFileData("fileUpload");
        var response = await ApiCommunicator.ImportTest(Convert.FromBase64String(data));
        _tests = await ApiCommunicator.GetAllTests();
    }

    public Task SaveAs(string filename, byte[] data)
        => JsRuntime.InvokeAsync<object>(
            "saveAsFile",
            filename,
            Convert.ToBase64String(data));

    private async void ExportAsCsv(Test test)
    {
        var data = await ApiCommunicator.ExportTestAsCsv(test);
        await SaveAs($"{test.TestName}.csv", data);
    }

    private async void ExportAsPdf(Test test)
    {
        var data = await ApiCommunicator.ExportTestAsPdf(test);
        await SaveAs($"{test.TestName}.pdf", data);
    }

}